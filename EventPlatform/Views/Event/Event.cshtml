@{
    ViewData["Title"] = "Events - EventLab";
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" />
<link rel="stylesheet" href="/css/Event.css" />

<section class="page-banner">
    <div class="container">
        <h1>Popular Event</h1>
        <p><a href="/">Home</a> > Popular Event</p>
    </div>
</section>

<main class="main-content">
    <div class="container">
        <div class="section-title">
            <p class="subtitle">Event</p>
            <h2>POPULAR EVENT</h2>
        </div>

        <div class="category-filter">
            <button class="category-btn active" data-category-id="0">All</button>
            <button class="category-btn" data-category-id="1">Fire Wall</button>
            <button class="category-btn" data-category-id="2">Sport</button>
            <button class="category-btn" data-category-id="3">Web Development</button>
            <button class="category-btn" data-category-id="4">Marketing</button>
            <button class="category-btn" data-category-id="5">Technology</button>
        </div>

        <div class="events-grid" id="events-grid-container">
        </div>

        <div class="load-more-container">
            <button class="btn-primary" id="load-more-btn">Load More</button>
        </div>
    </div>
</main>

<button id="open-search-btn" class="btn-primary">
    <i class="fas fa-search"></i>
</button>

<div id="search-popup" class="search-popup-overlay">
    <div class="search-popup-content">
        <button id="close-popup-btn" class="close-popup-btn">
            <i class="fas fa-times"></i>
        </button>
        <h3>Find Your Event</h3>

        <div class="search-input-group">
            <input type="text" id="search-term-input" placeholder="Enter event name, keyword, ...">
        </div>

        <div class="filter-group">
            <h4>By Category</h4>
            <div class="filter-tags" id="popup-category-filter">
                <button class="category-btn active" data-category-id="0">All</button>
                <button class="category-btn" data-category-id="1">Fire Wall</button>
                <button class="category-btn" data-category-id="2">Sport</button>
                <button class="category-btn" data-category-id="3">Web Development</button>
                <button class="category-btn" data-category-id="4">Marketing</button>
                <button class="category-btn" data-category-id="5">Technology</button>
            </div>
        </div>

        <div class="filter-group">
            <h4>By Tag</h4>
            <div class="filter-tags" id="popup-tag-filter">
                <button class="tag-btn" data-tag-id="1">#Conference</button>
                <button class="tag-btn" data-tag-id="2">#Workshop</button>
                <button class="tag-btn" data-tag-id="3">#Online</button>
                <button class="tag-btn" data-tag-id="4">#Networking</button>
            </div>
        </div>

        <div class="search-popup-footer">
            <button class="btn-primary" style="width: 100%;" id="search-now-btn">Search Now</button>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Trạng thái truy vấn (query state)
        let queryParams = {
            searchTerm: null,
            categoryId: null,
            tagIds: [],
            pageNumber: 1,
            pageSize: 6 // Giả sử mỗi trang 6 sự kiện
        };
        let totalPages = 1;

        const gridContainer = document.getElementById('events-grid-container');
        const loadMoreBtn = document.getElementById('load-more-btn');
        const API_BASE_URL = "https://localhost:7063";

        // Hàm gọi API và render sự kiện
        async function fetchAndRenderEvents(append = false) {
            if (!append) {
                queryParams.pageNumber = 1; // Reset trang nếu là tìm kiếm mới
            }

            // 1. Xây dựng URL
            const params = new URLSearchParams();
            if (queryParams.searchTerm) {
                params.append('SearchTerm', queryParams.searchTerm);
            }
            if (queryParams.categoryId) {
                params.append('CategoryId', queryParams.categoryId);
            }
            queryParams.tagIds.forEach(tagId => {
                params.append('TagIds', tagId);
            });
            params.append('PageNumber', queryParams.pageNumber);
            params.append('PageSize', queryParams.pageSize);

            try {
                // 2. Gọi API
                const response = await fetch(`${API_BASE_URL}/api/Events?${params.toString()}`);
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                const data = await response.json(); // Data là PaginatedResult<EventSummaryDto>

                // 3. Render
                if (!append) {
                    gridContainer.innerHTML = ''; // Xóa cũ nếu là tìm kiếm mới
                }

                data.items.forEach(event => {
                    gridContainer.insertAdjacentHTML('beforeend', createEventCardHtml(event));
                });

                // 4. Xử lý phân trang
                totalPages = data.totalPages;
                if (queryParams.pageNumber >= totalPages) {
                    loadMoreBtn.style.display = 'none'; // Ẩn nút nếu đã hết
                } else {
                    loadMoreBtn.style.display = 'block';
                }

            } catch (error) {
                console.error('Failed to fetch events:', error);
                gridContainer.innerHTML = '<p>Error loading events. Please try again later.</p>';
            }
        }

        // Hàm tạo HTML cho 1 thẻ sự kiện
        function createEventCardHtml(event) {
            // event ở đây là EventSummaryDto
            const eventDate = new Date(event.startTime).toLocaleDateString('en-US', {
                year: 'numeric', month: 'long', day: 'numeric'
            });

            // Lấy URL hình ảnh, nếu null thì dùng placeholder
            const imageUrl = event.cardImageUrl ? event.cardImageUrl : `https://via.placeholder.com/720x960/ccc/333?text=Event`;

            // Đổi href="#" thành link thật
            const detailUrl = `/Event/EventDetail?id=${event.eventId}`;

            return `
                <div class="event-card">
                    <div class="event-card-image-wrapper">
                        <div class="event-card-image" style="background-image: url('${imageUrl}');"></div>
                        <span class="seat-badge"><i class="fas fa-chair"></i> ${event.totalSeats} Seat</span>
                    </div>
                    <div class="event-card-content">
                        <p class="event-card-date">
                            <span><i class="far fa-calendar-alt icon"></i> ${eventDate}</span> |
                            <span><i class="fas fa-map-marker-alt icon"></i> ${event.location || 'Online'}</span>
                        </p>
                        <h3 class="event-card-title">${event.title}</h3>
                        <div class="event-card-footer">
                            <a href="${detailUrl}" class="book-now-link">BOOK NOW</a>
                            <div class="social-icons">
                                <a href="#"><i class="far fa-heart"></i></a>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }

        // --- Gắn các Event Listeners ---

        // 1. Tải sự kiện ban đầu
        fetchAndRenderEvents(false);

        // 2. Nút "Load More"
        loadMoreBtn.addEventListener('click', () => {
            if (queryParams.pageNumber < totalPages) {
                queryParams.pageNumber++;
                fetchAndRenderEvents(true); // `true` để chắp thêm vào
            }
        });

        // 3. Bộ lọc Category ở trang chính
        document.querySelectorAll('.category-filter .category-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                document.querySelector('.category-filter .category-btn.active').classList.remove('active');
                btn.classList.add('active');

                const catId = parseInt(btn.dataset.categoryId, 10);
                queryParams.categoryId = catId > 0 ? catId : null;
                fetchAndRenderEvents(false); // Tải lại từ đầu
            });
        });

        // 4. Xử lý Search Popup
        const searchPopup = document.getElementById('search-popup');
        const openBtn = document.getElementById('open-search-btn');
        const closeBtn = document.getElementById('close-popup-btn');

        openBtn.addEventListener('click', () => searchPopup.style.display = 'flex');
        closeBtn.addEventListener('click', () => searchPopup.style.display = 'none');
        searchPopup.addEventListener('click', (e) => {
            if (e.target === searchPopup) searchPopup.style.display = 'none';
        });

        // 5. Các nút lọc trong Popup
        const popupCategoryButtons = document.querySelectorAll('#popup-category-filter .category-btn');
        popupCategoryButtons.forEach(btn => {
            btn.addEventListener('click', () => {
                popupCategoryButtons.forEach(b => b.classList.remove('active'));
                btn.classList.add('active');
            });
        });

        const popupTagButtons = document.querySelectorAll('#popup-tag-filter .tag-btn');
        popupTagButtons.forEach(btn => {
            btn.addEventListener('click', () => btn.classList.toggle('active'));
        });

        // 6. Nút "Search Now" trong Popup
        document.getElementById('search-now-btn').addEventListener('click', () => {
            // Thu thập dữ liệu
            queryParams.searchTerm = document.getElementById('search-term-input').value;

            const activeCatBtn = document.querySelector('#popup-category-filter .category-btn.active');
            const catId = parseInt(activeCatBtn.dataset.categoryId, 10);
            queryParams.categoryId = catId > 0 ? catId : null;

            queryParams.tagIds = [];
            document.querySelectorAll('#popup-tag-filter .tag-btn.active').forEach(btn => {
                queryParams.tagIds.push(parseInt(btn.dataset.tagId, 10));
            });

            // Đóng popup và tìm kiếm
            searchPopup.style.display = 'none';
            fetchAndRenderEvents(false); // Tải lại từ đầu
        });

    });
</script>